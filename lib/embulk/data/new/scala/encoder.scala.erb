package <%= java_package_name %>

import java.io.{OutputStream, IOException}
import com.google.common.base.Optional
import org.embulk.config.{Config, ConfigDefault, ConfigInject, ConfigSource, Task, TaskSource}
import org.embulk.spi.{EncoderPlugin, FileOutput, BufferAllocator}
import org.embulk.spi.util.{FileOutputOutputStream, OutputStreamFileOutput}

class <%= java_class_name %> extends EncoderPlugin
{
  trait PluginTask extends Task
  {
    // configuration option 1 (required integer)
    @Config("option1")
    def getOption1: Int

    // configuration option 2 (optional string, null is not allowed)
    @Config("option2")
    @ConfigDefault("\"myvalue\"")
    def getOption2: String

    // configuration option 3 (optional string, null is allowed)
    @Config("option3")
    @ConfigDefault("null")
    def getOption3: Optional[String]

    @ConfigInject
    def getBufferAllocator: BufferAllocator
  }

  override def transaction(config: ConfigSource, control: EncoderPlugin.Control): Unit = {
    val task: PluginTask = config.loadConfig(classOf[PluginTask])

    control.run(task.dump())
  }

  override def open(taskSource: TaskSource, fileOutput: FileOutput): FileOutput = {
    val task: PluginTask = taskSource.loadTask(classOf[PluginTask])

    // Write your code here :)
    throw new UnsupportedOperationException("<%= java_class_name %>.open method is not implemented yet")

    // If expect OutputStream, you can use this code:

    //val output: FileOutputOutputStream = new FileOutputOutputStream(fileOutput,
    //    task.getBufferAllocator, FileOutputOutputStream.CloseMode.FLUSH)
    //
    //new OutputStreamFileOutput(new OutputStreamFileOutput.Provider() {
    //  @throws (classOf[IOException])
    //  def openNext: OutputStream = {
    //    output.nextFile()
    //    newEncoderOutputStream(task, output)
    //  }
    //
    //  @throws (classOf[IOException])
    //  def finish: Unit = {
    //    output.finish()
    //  }
    //
    //  @throws (classOf[IOException])
    //  def close: Unit = {
    //    output.close()
    //  }
    //})
  }

  //object newEncoderOutputStream {
  //  @throws (classOf[IOException])
  //  def apply(task: PluginTask, file: OutputStream): OutputStream = {
  //    new MyOutputStream(file)
  //  }
  //}
}
