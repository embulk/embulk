package <%= java_package_name %>

import java.io.InputStream
import java.io.IOException
import com.google.common.base.Optional
import org.embulk.config.{Config, ConfigDefault, ConfigInject, ConfigSource, Task, TaskSource}
import org.embulk.spi.{DecoderPlugin, FileInput, BufferAllocator}
import org.embulk.spi.util.{FileInputInputStream, InputStreamFileInput}

class <%= java_class_name %> extends DecoderPlugin
{
  trait PluginTask extends Task
  {
    // configuration option 1 (required integer)
    @Config("option1")
    def getOption1: Int

    // configuration option 2 (optional string, null is not allowed)
    @Config("option2")
    @ConfigDefault("\"myvalue\"")
    def getOption2: String

    // configuration option 3 (optional string, null is allowed)
    @Config("option3")
    @ConfigDefault("null")
    def getOption3: Optional[String]

    @ConfigInject
    def getBufferAllocator: BufferAllocator
  }

  override def transaction(config: ConfigSource, control: DecoderPlugin.Control): Unit = {
    val task: PluginTask = config.loadConfig(classOf[PluginTask])

    control.run(task.dump())
  }

  override def open(taskSource: TaskSource, fileInput: FileInput): FileInput = {
    val task: PluginTask = taskSource.loadTask(classOf[PluginTask])

    // Write your code here :)
    throw new UnsupportedOperationException("<%= java_class_name %>.open method is not implemented yet")

    // If expect InputStream, you can use this code:

    //val files: FileInputInputStream = new FileInputInputStream(fileInput)
    //
    //new InputStreamFileInput(
    //  task.getBufferAllocator,
    //  new InputStreamFileInput.Provider() {
    //    @throws (classOf[IOException])
    //    def openNext: InputStream = {
    //      if (!files.nextFile()) {
    //        null
    //      }
    //      newDecoderInputStream(task, files)
    //    }
    //
    //    @throws (classOf[IOException])
    //    def close: Unit = {
    //      files.close()
    //    }
    //  })
  }

  //object newDecoderInputStream {
  //  @throws (classOf[IOException])
  //  def apply(task: PluginTask, file: InputStream): InputStream = {
  //    new MyInputStream(file)
  //  }
  //}
}
