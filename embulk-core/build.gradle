// TODO: Remove this block once we re-upgrade jruby-gradle-jar-plugin..
// See #1: https://github.com/embulk/embulk/issues/954
// See #2: https://github.com/jruby-gradle/jruby-gradle-plugin/issues/297
repositories {
    mavenLocal()
    maven { url 'http://rubygems-proxy.torquebox.org/releases' }
}

apply plugin: 'com.github.jruby-gradle.jar'

// TODO: Have more details in description and summary.
description = 'Embulk core'
ext {
    summary = 'Embulk core'
}

// include ruby scripts to jar. don't use sourceSets.main.resources.srcDirs
// because IntelliJ causes error if srcDirs includes files out of projectDir.
processResources.from("${buildDir}/embulk_gem_as_resources", "${buildDir}/dependency_gems_as_resources")

configurations {
    // com.google.inject:guice depends on asm and cglib but version of the libraries conflict
    // with ones bundled in jruby-complete and cause bytecode compatibility error
    compile.exclude group: 'asm', module: 'asm'
    compile.exclude group: 'org.sonatype.sisu.inject', module: 'cglib'
}

import com.github.jrubygradle.JRubyExec
import com.github.jrubygradle.JRubyPrepare

repositories {
    mavenCentral()
}

// determine which dependencies have updates: $ gradle dependencyUpdates
dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'com.google.inject:guice:4.0'
    compile 'com.google.inject.extensions:guice-multibindings:4.0'
    compile 'javax.inject:javax.inject:1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.7'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.7'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.7'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-guava:2.6.7'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.6.7'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.7'
    compile 'com.fasterxml.jackson.module:jackson-module-guice:2.6.7'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.jruby:jruby-complete:' + rootProject.jrubyVersion
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.apache.bval:bval-jsr303:0.5'
    compile 'joda-time:joda-time:2.9.2'
    compile 'org.msgpack:msgpack-core:0.8.11'

    // bval-jsr303:0.5 depends on commons-lang3:3.1,
    // but it was upgraded to 3.4 when maven-aether-provider:3.3.9 was introduced.
    // Maven-related dependencies are moved to embulk-deps-maven.
    compile 'org.apache.commons:commons-lang3:3.4'

    testCompile 'junit:junit:4.12'
    testCompile 'ch.qos.logback:logback-classic:1.1.3'

    // TODO: Remove this, and load it with the proper DependencyClassLoader.
    // This statement gets it loaded by the top-level ClassLoader.
    testCompile project(':embulk-deps-buffer')
    testCompile project(':embulk-deps-config')
    testCompile project(':embulk-deps-guess')

    gems 'rubygems:bundler:1.16.0'
    gems 'rubygems:msgpack:1.1.0'
    gems 'rubygems:liquid:4.0.0'

    jrubyExec 'rubygems:simplecov:0.10.+'
    jrubyExec 'rubygems:test-unit:3.0.+'
}

jruby {
    execVersion = rootProject.jrubyVersion
}

task rubyTestVanilla(type: JRubyExec, dependsOn: ["jar", "prepareDependencyJars", ":embulk-deps-buffer:prepareDependencyJars", ":embulk-deps-config:prepareDependencyJars", ":embulk-deps-guess:prepareDependencyJars"]) {
    jrubyArgs '-Isrc/main/ruby', '-Isrc/test/ruby', '--debug', './src/test/ruby/vanilla/run-test.rb'
}
task rubyTestMonkeyStrptime(type: JRubyExec) {
    jrubyArgs '-Isrc/main/ruby', '-Isrc/test/ruby', '--debug', './src/test/ruby/monkey_strptime/run-test.rb'
}
test.dependsOn(['rubyTestVanilla', 'rubyTestMonkeyStrptime', ":test-helpers:deploy"])

String buildRubyStyleVersionFromJavaStyleVersion(String javaStyleVersion) {
    if (javaStyleVersion.contains('-')) {
        List<String> versionTokens = javaStyleVersion.tokenize('-');
        if (versionTokens.size() != 2) {
            throw new GradleException('Invalid project version: ' + javaStyleVersion);
        }
        return versionTokens.get(0) + '.' + versionTokens.get(1).toLowerCase();
    }
    else {
        return javaStyleVersion;
    }
}

task unpackDependencyGems(type: JRubyPrepare) {
    doFirst {
        delete("${buildDir}/dependency_gems_as_resources")
    }
    outputDir file("${buildDir}/dependency_gems_installed")
    dependencies configurations.gems
    doLast {
        configurations.gems.each { gemFilePath ->
            copy {
                from "${buildDir}/dependency_gems_installed"
                into "${buildDir}/dependency_gems_as_resources"
                // These "include" may contain both pure-Ruby and JRuby gems, e.g. "msgpack" and "msgpack-java".
                // TODO: Specify exact pure-Ruby or JRuby gems.
                include "gems/${gemFilePath.name.take(gemFilePath.name.lastIndexOf('.'))}/**"
                include "gems/${gemFilePath.name.take(gemFilePath.name.lastIndexOf('.'))}-java/**"
                include "specifications/${gemFilePath.name.take(gemFilePath.name.lastIndexOf('.'))}*.gemspec"
            }
        }
        fileTree(dir: "${buildDir}/dependency_gems_as_resources", include: "**/.jrubydir").each { f -> f.delete() }
    }
}
processResources.dependsOn("unpackDependencyGems")

task buildEmbulkGem {
    doFirst {
        delete("${buildDir}/embulk_gem_as_resources")
    }
    doLast {
        def rubyVersion = buildRubyStyleVersionFromJavaStyleVersion("${project.version}")
        file("${buildDir}/embulk_gem_as_resources/gems/embulk-${rubyVersion}-java/lib").mkdirs()
        copy {
            from "${projectDir}/src/main/ruby"
            into "${buildDir}/embulk_gem_as_resources/gems/embulk-${rubyVersion}-java/lib"
        }
        file("${buildDir}/embulk_gem_as_resources/specifications").mkdirs()
        // TODO: Build the gemspec properly by the gem command, not by templating.
        // TODO: Set gem versions directly from this build.gradle's dependencies.
        // TODO: Fill the rubygems version from the actual JRuby runtime.
        // NOTE: add_development_dependency (test-unit and others) is basically not required here.
        file("${buildDir}/embulk_gem_as_resources/specifications/embulk-${rubyVersion}-java.gemspec").write($/\
# -*- encoding: utf-8 -*-
# stub: embulk ${rubyVersion} java lib

Gem::Specification.new do |s|
  s.name = "embulk".freeze
  s.version = "${rubyVersion}"
  s.platform = "java".freeze

  s.required_rubygems_version = Gem::Requirement.new(">= 0".freeze) if s.respond_to? :required_rubygems_version=
  s.require_paths = ["lib".freeze]
  s.authors = ["Sadayuki Furuhashi".freeze]
  s.date = "2017-11-22"
  s.description = "${project.description}".freeze
  s.email = ["frsyuki@gmail.com".freeze]
  s.executables = ["embulk".freeze]
  s.homepage = "https://github.com/embulk/embulk".freeze
  s.licenses = ["Apache 2.0".freeze]
  s.rubygems_version = "2.6.13".freeze
  s.summary = "${project.ext.summary}".freeze

  s.installed_by_version = "2.6.13" if s.respond_to? :installed_by_version

  if s.respond_to? :specification_version then
    s.specification_version = 4

    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then
      s.add_runtime_dependency(%q<bundler>.freeze, [">= 1.10.6"])
      s.add_runtime_dependency(%q<msgpack>.freeze, ["~> 1.1.0"])
      s.add_runtime_dependency(%q<liquid>.freeze, ["~> 4.0.0"])
    else
      s.add_dependency(%q<bundler>.freeze, [">= 1.10.6"])
      s.add_dependency(%q<msgpack>.freeze, ["~> 1.1.0"])
      s.add_dependency(%q<liquid>.freeze, ["~> 4.0.0"])
    end
  else
    s.add_dependency(%q<bundler>.freeze, [">= 1.10.6"])
    s.add_dependency(%q<msgpack>.freeze, ["~> 1.1.0"])
    s.add_dependency(%q<liquid>.freeze, ["~> 4.0.0"])
  end
end
/$)
    }
}
processResources.dependsOn("buildEmbulkGem")

import java.util.zip.ZipFile
task updateResources(dependsOn: 'prepareDependencyJars') {
    doFirst {
        List<String> packages = []
        List<String> dirs = []
        file("${buildDir}/dependency_jars").listFiles().each { jarFile ->
            List<String> names = new ZipFile(jarFile.toString()).entries().iterator().collect { it.getName() }
            packages.addAll(names.findAll { it.endsWith(".class") }.collect { it.replaceFirst(/(?:^|\/)[^\/]*\.class$/, '').replaceAll(/\//, '.') }.unique())
            dirs.addAll(names.findAll { !it.endsWith("/") && !it.endsWith(".class") }.collect { it.replaceFirst(/(?:^|\/)[^\/]*$/, '') }.unique())
        }
        packages = packages.unique()
        dirs = dirs.unique()
        List<String> uniquePackages = packages.clone()
        List<String> uniqueDirs = dirs.clone()
        packages.each { pk -> uniquePackages.removeAll { it.startsWith(pk + '.') } }
        dirs.each { dir -> uniqueDirs.removeAll { it.startsWith(dir + '/') } }
        uniquePackages.removeAll { it.isEmpty() }
        uniqueDirs.removeAll { it.isEmpty() || it == "META-INF" }
        String date = new Date().format('yyyy-MM-dd HH:mm:ss z', TimeZone.getTimeZone("UTC"))
        file("src/main/resources/embulk/parent_first_packages.properties").withWriter { out ->
            out.println("# generated by './gradlew updateResources' at $date")
            uniquePackages.sort().each { out.println it }
        }
        file("src/main/resources/embulk/parent_first_resources.properties").withWriter { out ->
            out.println("# generated by './gradlew updateResources' at $date")
            uniqueDirs.sort().each { out.println it }
        }
    }
    doLast {
        prepareDependencyJars.execute()
    }
}

task prepareDependencyJars(type: Copy) {
    doFirst {
        delete("${buildDir}/dependency_jars")
    }
    from configurations.runtime + files("${project.libsDir}/${project.name}-${project.version}.jar")
    into "${buildDir}/dependency_jars"
}
