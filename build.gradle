
plugins {
    id 'com.jfrog.bintray' version '1.1'
    id 'com.github.ben-manes.versions' version '0.7'
    id 'com.github.jruby-gradle.base' version '0.1.5'
    id 'com.github.johnrengelman.shadow' version '1.2.0'
}

def java_projects = [project(":embulk-core"), project(":embulk-standards"), project(":embulk-cli")]
def release_projects = [project(":embulk-core"), project(":embulk-standards")]

allprojects {
    group = 'org.embulk'
    version = '0.4.3'

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    //
    // bintrayUpload task
    //
    bintray {
        // write at your bintray user name and api key to ~/.gradle/gradle.properties file:
        // bintray_user=frsyuki
        // bintray_api_key=xxxxxxxxxxx
        user = project.hasProperty('bintray_user') ? bintray_user : ''
        key = project.hasProperty('bintray_api_key') ? bintray_api_key : ''

        publications = ['bintrayMavenRelease']

        filesSpec {
            // include embulk-<version>.jar built by 'cli' task
            from "pkg/embulk-${project.version}.jar"
            into ""
        }

        dryRun = false
        publish = false  // TODO automate uploading embulk.jar and make this true

        pkg {
            userOrg = 'embulk'
            repo = 'maven'
            name = 'embulk'
            desc = 'Embulk, a plugin-based parallel bulk data loader'
            websiteUrl = 'https://github.com/embulk/embulk'
            issueTrackerUrl = 'https://github.com/embulk/embulk/issues'
            vcsUrl = 'https://github.com/embulk/embulk.git'
            licenses = ['Apache-2.0']
            labels = ['embulk', 'ruby', 'java']
            publicDownloadNumbers = true

            version {
                name = project.version
                // TODO
                //mavenCentralSync {
                //    sync = true
                //    user = 'userToken'
                //    password = 'paasword'
                //    close = '1'
                //}
            }
        }
    }
}

subprojects {
    if (java_projects.contains(project)) {
        apply plugin: 'maven'
        apply plugin: 'findbugs'
        apply plugin: 'jacoco'

        repositories {
            mavenCentral()
            jcenter()
        }

        compileJava.options.encoding = 'UTF-8' // source encoding
        sourceCompatibility = 1.7
        targetCompatibility = 1.7

        dependencies {
            testCompile 'junit:junit:4.12'
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" //<< "-Xlint:deprecation"
        }
        tasks.withType(FindBugs) {
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }

        findbugs {
            ignoreFailures = true
        }

        javadoc {
            options {
                locale = 'en_US'
                encoding = 'UTF-8'
            }
        }

        // add javadoc/source jar tasks as artifacts to be released
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
        artifacts {
            archives sourcesJar, javadocJar
        }
    }

    publishing {
        publications {
            if (release_projects.contains(project)) {
                bintrayMavenRelease(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }
    }
}

//
// classpath task
//
task classpath(dependsOn: ['build', ':embulk-cli:classpath']) << { }
clean { delete 'classpath' }

//
// cli task
//
task cli(dependsOn: ':embulk-cli:shadowJar') << {
    file('pkg').mkdirs()
    File f = file("pkg/embulk-${project.version}.jar")
    f.write('''\
#!/bin/sh
exec java -jar "$0" "$@"
exit 127
''')
    f.append(file("embulk-cli/build/libs/embulk-cli-${project.version}-all.jar").readBytes())
    f.setExecutable(true)
}
bintrayUpload.dependsOn(['cli'])

project(':embulk-cli') {
    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        manifest {
            attributes 'Implementation-Title': project.name,
                       'Implementation-Version': project.version,
                       'Implementation-Vendor-Id': project.group,
                       'Specification-Title': project.name,
                       'Specification-Version': project.version,
                       'Main-Class': 'org.embulk.cli.Main'
        }
        append("${rootProject.projectDir}/COPYING")
    }

    task classpath(type: Copy) {
        doFirst { file("${rootProject.projectDir}/classpath").mkdirs() }
        from configurations.runtime
        into "${rootProject.projectDir}/classpath"
    }
}

//
// gem task
//
import com.github.jrubygradle.JRubyExec
task gem(type: JRubyExec) {
    jrubyArgs '-rrubygems/gem_runner', '-eGem::GemRunner.new.run(ARGV)', 'build'
    script 'build/gemspec'
    doLast { ant.move(file: "${project.name}-${project.version}.gem", todir: "pkg") }
}
gem.dependsOn('gemspec')
gem.dependsOn('classpath')

//
// rubyGemsUpload task
//
task rubyGemsUpload(type: JRubyExec, dependsOn: ["gem"]) {
    jrubyArgs '-rrubygems/gem_runner', '-eGem::GemRunner.new.run(ARGV)', 'push'
    script "pkg/embulk-${project.version}.gem"
}
gem.dependsOn('gemspec')

//
// releaseCheck and release tasks
//
task releaseCheck << {
    if (!file("lib/embulk/version.rb").getText().contains("${project.version}")) {
        throw new GradleException("lib/embulk/version.rb doesn't include ${project.version}")
    }
    if (!file("embulk-docs/src/release/release-${project.version}.rst").getText().contains("${project.version}")) {
        throw new GradleException("Release note for ${project.version} doesn't exist")
    }
    if (!file("embulk-docs/src/release.rst").getText().contains("release-${project.version}")) {
        throw new GradleException("embulk-docs/src/release.rst doesn't include release-${project.version}")
    }
    String date = new Date().format("yyyy-MM-dd")
    if (!file("embulk-docs/src/release/release-${project.version}.rst").getText().contains(date)) {
        throw new GradleException("embulk-docs/src/release/release-${project.version}.rst doesn't include today's release date")
    }
    // TODO check git-ls-files includes release-<version>.rst file
    println "Ready. Run 'release' task."
}

task release(dependsOn: ["releaseCheck", "bintrayUpload", "rubyGemsUpload"]) << {
    println """
Manual operations:

  git commit -am v${project.version}
  git tag v${project.version}

"""
}
bintrayUpload.mustRunAfter('releaseCheck')
rubyGemsUpload.mustRunAfter('releaseCheck')

task gemspec << {
    file('build').mkdirs()
    file('build/gemspec').write($/
Gem::Specification.new do |gem|
  gem.name          = "embulk"
  gem.version       = "${project.version}"

  gem.summary       = "Embulk, a plugin-based parallel bulk data loader"
  gem.description   = "Embulk is an open-source, plugin-based bulk data loader to scale and simplify data management across heterogeneous data stores. It can collect and ship any kinds of data in high throughput with transaction control."
  gem.authors       = ["Sadayuki Furuhashi"]
  gem.email         = ["frsyuki@gmail.com"]
  gem.license       = "Apache 2.0"
  gem.homepage      = "https://github.com/embulk/embulk"

  gem.files         = `git ls-files`.split("\n") + Dir["classpath/*.jar"]
  gem.test_files    = gem.files.grep(%r"^(test|spec)/")
  gem.executables   = gem.files.grep(%r"^bin/").map{ |f| File.basename(f) }
  gem.require_paths = ["lib"]
  gem.has_rdoc      = false

  gem.add_development_dependency "bundler", [">= 1.0"]
  gem.add_development_dependency "rake", [">= 0.10.0"]
  gem.add_development_dependency "rspec", ["~> 2.11"]
  gem.add_development_dependency "json", ["~> 1.7"]
  gem.add_development_dependency "yard", ["~> 0.8.7"]
  gem.add_development_dependency "kramdown", ["~> 1.5.0"]
end
/$)
}

//
// change 'VERSION = "X.Y.Z"' in version file.
//
import java.util.regex.Matcher
import java.util.regex.Pattern
task change_source_ver << {
  Matcher matcher
  String new_ver

  // 1:version = '
  // 3:version number
  // 4:'
  String regex = "^(\\s+version\\s+=\\s+['\"])(\\d+\\.\\d+\\.\\d+)(['\"])"
  Pattern pattern = Pattern.compile(regex,Pattern.MULTILINE |
                                          Pattern.CASE_INSENSITIVE )

  File f = file('lib/embulk/version.rb')
  String contents =  f.getText()

  matcher  = contents =~ pattern
  if( matcher.find() ){
//    println("match")

  new_ver = matcher.group(1) + "${project.version}" + matcher.group(3)
    contents = matcher.replaceAll(new_ver)
  }

  file('lib/embulk/version.rb').write(contents)
}

//
// change 'wget embulk-x.y.z.jar' version in README.md
//
task change_readme_ver << {
  Matcher matcher
  String new_ver

  // 1:wget
  // 2:version number
  // 3:.jar...
  String regex = "^(wget.*)(\\d+\\.\\d+\\.\\d+)(.*)"
  Pattern pattern = Pattern.compile(regex,Pattern.MULTILINE)

  File f = file('README.md')
  String contents =  f.getText()

  matcher  = contents =~ pattern
  if( matcher.find() ){
//    println("match")

    new_ver = matcher.group(1) + "${project.version}" + matcher.group(3)
    contents = matcher.replaceAll(new_ver)
  }

  file('README.md').write(contents)

}

task change_version(dependsOn: ['change_readme_ver', 'change_source_ver']) << {}
