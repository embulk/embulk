// TODO: Remove this block once we re-upgrade jruby-gradle-jar-plugin..
// See #1: https://github.com/embulk/embulk/issues/954
// See #2: https://github.com/jruby-gradle/jruby-gradle-plugin/issues/297
repositories {
    mavenLocal()
    maven { url 'http://rubygems-proxy.torquebox.org/releases' }
}

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        // TODO: Re-upgrade jruby-gradle-jar-plugin.
        // See: https://github.com/embulk/embulk/issues/954
        classpath 'com.github.jruby-gradle:jruby-gradle-jar-plugin:1.0.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.ajoberstar.grgit:grgit-gradle:3.0.0'
        classpath "org.owasp:dependency-check-gradle:5.2.1"
    }
}

def getRevision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir "${rootDir}"
        commandLine "git", "rev-parse", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def revision = getRevision()

allprojects {  // Applies all projects including the root project as well.
    apply plugin: 'java'

    group = 'org.embulk'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    test {
        maxHeapSize = '1536m'
        forkEvery = 1  // test processes are forked by each test class (default is 0)
    }
}

apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: "org.owasp.dependencycheck"

version = '0.9.23-SNAPSHOT'

description = 'Embulk is an open-source, plugin-based bulk data loader to scale and simplify data management across heterogeneous data stores. It can collect and ship any kinds of data in high throughput with transaction control.'

ext {
    jrubyVersion = '9.1.15.0'
    summary = 'Embulk, a plugin-based parallel bulk data loader'
}

configure(subprojects.findAll { ['embulk-core', 'embulk-deps-buffer', 'embulk-deps-cli', 'embulk-deps-guess', 'embulk-deps-config', 'embulk-deps-maven', 'embulk-standards', 'embulk-test'].contains(it.name) }) {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    // TODO: Enable SpotBugs instead of FindBugs which was used in Embulk until v0.9.17.

    // The version needs to be declared here, not in each build.gradle, so that "bintray" can get the value.
    version = "${rootProject.version}"
    project.ext.setProperty("revision", revision)

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    tasks.withType(Test) {
        systemProperties System.properties.findAll { it.key.startsWith("org.embulk") }
        testLogging {
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    tasks.withType(Checkstyle) {
        reports {
            // Not to skip up-to-date checkstyles.
            outputs.upToDateWhen { false }
        }
    }

    checkstyle {
        toolVersion '8.7'
        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        configProperties = [
            'checkstyle.config.path': file("${projectDir}/config/checkstyle")
        ]
        ignoreFailures = false
        maxWarnings = 0  // https://github.com/gradle/gradle/issues/881
    }

    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
        }
    }

    jar {
        manifest {
            attributes 'Implementation-Title': project.name,
                       'Implementation-Version': project.version,
                       'Implementation-Vendor-Id': project.group,
                       'Specification-Title': project.name,
                       'Specification-Version': project.version
        }
    }

    task testsJar(type: Jar, dependsOn: classes) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives testsJar
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            maven(MavenPublication) {
                if (project.version.endsWith("-SNAPSHOT")) {
                    version = "${project.version}-${revision}"
                }
                from components.java
                artifact testsJar
                artifact sourcesJar
                artifact javadocJar
            }
        }

        // publishMavenPublicationToGithubRepository
        repositories {
            maven {
                name = "github"
                url "https://maven.pkg.github.com/embulk/embulk"
                credentials {
                    username = project.hasProperty("github_package_user") ? github_package_user : ""
                    password = project.hasProperty("github_package_token") ? github_package_token : ""
                }
            }
        }
    }

    bintray {  // Defines "bintrayUpload" properties for Java subprojects.
        // NOTE: Define Gradle properties "bintray_user" and "bintray_api_key" to upload the releases to Bintray.
        // ~/.gradle/gradle.properties would help defining.
        user = project.hasProperty('bintray_user') ? bintray_user : ''
        key = project.hasProperty('bintray_api_key') ? bintray_api_key : ''

        publications = ["maven"]

        dryRun = false
        publish = true

        pkg {
            userOrg = 'embulk'
            repo = 'maven'
            name = 'embulk'
            desc = 'Embulk, a plugin-based parallel bulk data loader'
            websiteUrl = 'https://github.com/embulk/embulk'
            issueTrackerUrl = 'https://github.com/embulk/embulk/issues'
            vcsUrl = 'https://github.com/embulk/embulk.git'
            licenses = ['Apache-2.0']
            labels = ['embulk', 'ruby', 'java']
            publicDownloadNumbers = true
            version {
                name = project.version
            }
        }
    }
}

repositories {
    mavenCentral()
}

configurations {
    embed
}

dependencies {
    compile project(':embulk-core')
    compile project(':embulk-standards')

    // Logback and jansi are included only in the executable package. (jansi for logback colors to work on Windows.)
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'org.fusesource.jansi:jansi:1.11'

    embed project(':embulk-deps-buffer')

    embed project(':embulk-deps-guess')

    embed(project(':embulk-deps-maven')) {
        exclude group: 'org.apache.commons', module: 'commons-lang3'  // Included in embulk-core.
        exclude group: 'com.google.guava', module: 'guava'  // Included in embulk-core.
    }

    embed project(':embulk-deps-cli')
}

def listEmbedDependencies = { rootModuleName, prefix ->
    def list = []
    configurations.embed.resolvedConfiguration.firstLevelModuleDependencies.each { firstLevelDependency ->
        if (firstLevelDependency.moduleName == rootModuleName) {
            firstLevelDependency.allModuleArtifacts.each { requiredArtifact ->
                list.add(prefix + requiredArtifact.file.name)
            }
        }
    }
    if (list.isEmpty()) {
        throw new GradleException('Failed to collect libraries to embed: no dependencies found for: "' + rootModuleName + '"')
    }
    return String.join(' ', list)
}

// Workaround: "*.jar" resources in the shadowed JAR are unfortunately unzipped by the Gradle Shadow plugin.
// @see https://github.com/johnrengelman/shadow/issues/111
task embeddedJarsJar(type: Jar) {
    doFirst {
        delete file("$buildDir/embeddedJars")
    }
    baseName = 'embulk-embedded'
    classifier = null
    destinationDir file("$buildDir/embeddedJars")
    exclude 'META-INF/**'
    into('/lib') {
        from configurations.embed
    }
}

shadowJar {  // Builds a fat-JAR with recurred dependencies from the above ':embulk-core' and ':embulk-standards'.
    dependsOn embeddedJarsJar
    from embeddedJarsJar

    // NOTE: This 'Implementation-Version' in the manifest is referred to provide the Embulk version at runtime.
    // See also: embulk-core/src/main/java/org/embulk/EmbulkVersion.java
    manifest {
        attributes 'Implementation-Title': 'embulk',
                   'Implementation-Version': project.version,
                   'Implementation-Vendor-Id': project.group,
                   'Specification-Title': 'embulk',
                   'Specification-Version': project.version,
                   'Embulk-Resource-Class-Path-Buffer': listEmbedDependencies('embulk-deps-buffer', '/lib/'),
                   'Embulk-Resource-Class-Path-Guess': listEmbedDependencies('embulk-deps-guess', '/lib/'),
                   'Embulk-Resource-Class-Path-Maven': listEmbedDependencies('embulk-deps-maven', '/lib/'),
                   'Embulk-Resource-Class-Path-Cli': listEmbedDependencies('embulk-deps-cli', '/lib/'),
                   'Main-Class': 'org.embulk.cli.Main'
    }

    append("${rootProject.projectDir}/COPYING")
}

task executableJar(dependsOn: 'shadowJar') {  // Builds an executable fat-JAR from "shadowJar".
    ext.destinationDir = file("${buildDir}/executable")
    doFirst {
        destinationDir.mkdirs()
    }
    ext.destination = file("${destinationDir}/embulk-${project.version}.jar")
    doLast {
        destination.write("")
        destination.append("\n: <<END_OF_EMBULK_SELFRUN_BATCH_PART\r\n")
        destination.append(file("embulk-core/src/main/bat/selfrun.bat").readBytes())
        destination.append("\r\nEND_OF_EMBULK_SELFRUN_BATCH_PART\r\n\n")
        destination.append(file("embulk-core/src/main/sh/selfrun.sh").readBytes())
        destination.append(file("${buildDir}/libs/embulk-${project.version}-all.jar").readBytes())
        destination.setExecutable(true)
    }
}

task cli(type: Copy, dependsOn: 'executableJar') {
    doFirst {
        file('pkg').mkdirs()
    }
    from executableJar.destination
    into file('pkg')
}

bintray {  // Defines "bintrayUpload" properties for the root project's executable fat-JAR.
    // NOTE: Define Gradle properties "bintray_user" and "bintray_api_key" to upload the releases to Bintray.
    // ~/.gradle/gradle.properties would help defining.
    user = project.hasProperty('bintray_user') ? bintray_user : ''
    key = project.hasProperty('bintray_api_key') ? bintray_api_key : ''

    // No "publications". The executable embulk-${version}.jar (built by "executableJar") is uploaded by "filesSpec".
    // The executable is uploaded into the root directory of the version at Bintray.
    filesSpec {
        from executableJar.destination
        into "."
    }

    dryRun = false
    publish = true

    pkg {
        userOrg = 'embulk'
        repo = 'maven'
        name = 'embulk'
        desc = "${project.summary}"
        websiteUrl = 'https://github.com/embulk/embulk'
        issueTrackerUrl = 'https://github.com/embulk/embulk/issues'
        vcsUrl = 'https://github.com/embulk/embulk.git'
        licenses = ['Apache-2.0']
        labels = ['embulk', 'ruby', 'java']
        publicDownloadNumbers = true
        version {
            name = project.version
        }
    }
}
bintrayUpload.dependsOn(['executableJar'])

task releaseCheck {
    doFirst {
        if (rootProject.version.endsWith("-SNAPSHOT")) {
            throw new GradleException("Not for release. The version in build.gradle is SNAPSHOT: ${rootProject.version}")
        }
        def grgit = org.ajoberstar.grgit.Grgit.open(dir: "${rootProject.projectDir}")
        if (!grgit.status().clean) {
            throw new GradleException("Not for release. The working tree is dirty.")
        }
        def described = grgit.describe(commit: "HEAD").toString().trim()
        if (described != "v${rootProject.version}") {
            throw new GradleException("Not for release. git-describe returned a name different from the version in build.gradle: ${described} v.s. v${rootProject.version}")
        }
        if (described.contains("-")) {
            // HEAD may not be tagged with annotation properly.
            throw new GradleException("Not for release. git-describe returned a name with a hyphen: ${described}")
        }
        // TODO: Revisit if we would check the format of tag annotation.
    }
    doLast {
        println "Ready. Run 'release' task."
    }
}

task release(dependsOn: ["executableJar", "releaseCheck", "bintrayUpload"]) {
}
bintrayUpload.mustRunAfter('releaseCheck')

task setVersion {
    doFirst {
        throw new GradleException('Gradle task "setVersion" no longer exists. Edit "version" in build.gradle.')
    }
}

task updateJRuby {
    doFirst {
        throw new GradleException('Gradle task "updateJRuby" no longer exists. Edit "jrubyVersion" in build.gradle.')
    }
}
